// Importa el paquete 'buffer' si es necesario
import { Buffer } from 'buffer';

// Obtiene el contexto adecuado (globalThis, self, window)
const context = (() => {
    if (typeof globalThis !== "undefined") {
        return globalThis;
    } else if (typeof self !== "undefined") {
        return self;
    } else if (typeof window !== "undefined") {
        return window;
    } else {
        return Function("return this")();
    }
})();

// Define los objetos necesarios para la compatibilidad
const defines = {
    "Buffer": Buffer, // Usando el Buffer importado
    "exports": globalThis,
    "global": globalThis,
    "process.env": {}
};

// Itera sobre los defines y asigna los valores al contexto global
Object.keys(defines).forEach((key) => {
    const segments = key.split(".");
    let target = context;
    for (let i = 0; i < segments.length; i++) {
        const segment = segments[i];
        if (i === segments.length - 1) {
            target[segment] = defines[key];
        } else {
            target = target[segment] || (target[segment] = {});
        }
    }
});
